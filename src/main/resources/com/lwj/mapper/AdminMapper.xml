<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.lwj.mapper.AdminMapper">
  
  <!-- 작가 등록 -->
  	<insert id="imageEnroll">
  	
  		<selectKey resultType="int" keyProperty="imageId" order="AFTER">
  		
  			SELECT LAST_INSERT_ID()
  		
  		</selectKey>
  	
  		insert into goods_image(imageName, authorId, publeYear, publisher, catCode, imagePrice, imageStock, imageDiscount, imageIntro, imageContents)
		values(#{imageName},#{authorId}, #{publeYear},#{publisher},#{catCode},#{imagePrice},#{imageStock},#{imageDiscount},#{imageIntro},#{imageContents})

  	</insert>
  	
  	<!-- 카테고리 리스트 -->
  	<select id="catList" resultType="com.lwj.model.CategoryVO">
  	
  		select * from goods_img_cat order by catCode
  	
  	</select>
  	
  	<!-- 상품 리스트 -->
	<select id="goodsGetList" resultType="com.lwj.model.ImageVO">
	
		select  imageId, imageName,  b.authorName, c.catName, imageStock, a.regDate
		from goods_image a 
		left outer join image_author b on a.authorId = b.authorId
		left outer join goods_img_cat c on a.catCode = c.catCode
		<if test="keyword != null">
			where (imageName like concat ('%', #{keyword}, '%'))
		</if>
		order by imageId desc 
		limit #{skip}, #{amount}		
	
	</select>
  	
  	<!-- 상품 총 갯수 -->
  	<select id="goodsGetTotal" resultType="int">
  	
  		select count(*) from goods_image
  		
  		<if test="keyword != null">
  		
  			where imageName like concat('%' , #{keyword}, '%')
  		
  		</if>
  	
  	</select>
  	
  	<!-- 상품 조회 페이지 -->
	<select id="goodsGetDetail" resultType="com.lwj.model.ImageVO">
	
		select imageId, imageName, (select authorName from image_author where authorId =goods_image.authorId) authorName, 
			authorId, publeYear, publisher, catCode, imagePrice, imageStock, imageDiscount, imageIntro, imageContents, regDate, updateDate 
		from goods_image where imageId = #{imageId}
	
	</select>
		 
	<!-- 상품 정보 수정 -->
	<update id="goodsModify">
		
		update goods_image set imageName = #{imageName}, authorId = #{authorId}, publeYear = #{publeYear}, publisher = #{publisher}, catCode = ${catCode}, 
		imagePrice = #{imagePrice}, imageStock = #{imageStock}, imageDiscount = #{imageDiscount}, imageIntro = #{imageIntro}, imageContents = #{imageContents}, updateDate = now()
		where imageId = ${imageId}
		
	</update>
	
	<!-- 상품 정보 삭제 -->
	<delete id="goodsDelete">
	
		delete from goods_image where imageId = #{imageId}
	
	</delete>
	
	<!-- 이미지 등록 -->
	<insert id="uploadImageEnroll">
	
		insert into upload_image(bookId, fileName, uploadPath, uuid) values (#{bookId}, #{fileName}, #{uploadPath}, #{uuid})
	
	</insert>
  
  </mapper>